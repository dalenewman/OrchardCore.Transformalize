@using Microsoft.Extensions.DependencyInjection;
@using Transformalize.Configuration
@using TransformalizeModule.ViewModels
@using TransformalizeModule.Services.Contracts
@using TransformalizeModule
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http.Extensions
@using TransformalizeModule.Ext 

@model ReportViewModel

@{

   var hasParameters = Model.Process.Parameters.Any(p => p.Prompt);
   var entity = Model.Process.Entities.FirstOrDefault() ?? new Entity { Name = "Missing Entity" };
   var entityTitle = entity.Label == string.Empty ? entity.Alias : entity.Label;

   var settings = Context.RequestServices.GetService<ISettingsService>();
   var pageSizes = new List<int>();
   if (Model.Part != null) {
      pageSizes.AddRange(settings.GetPageSizes(Model.Part));
      if(Model.Process.Mode == "map" || Model.Process.Mode == "calendar") {
         if (Model.Part.PageSizesExtended.Enabled()) {
            pageSizes.AddRange(settings.GetPageSizesExtended(Model.Part));
         } else {
            pageSizes.Clear();
         }
      }
   }

   var allFields = entity.GetAllFields().Where(f => !f.System).ToArray();
   var hasCoordinates = allFields.Any(f => f.Alias.StartsWith("lat", StringComparison.OrdinalIgnoreCase)) && allFields.Any(f => f.Alias.StartsWith("lon", StringComparison.OrdinalIgnoreCase));

   var linkService = Context.RequestServices.GetService<ILinkService>();
   var exportCsvLink = linkService.Create(Model.Item.ContentItemId, Url.Action("StreamCsv", new { ContentItemId = Model.IdOrAlias }), true);
   var exportJsonLink = linkService.Create(Model.Item.ContentItemId, Url.Action("StreamJson", new { ContentItemId = Model.IdOrAlias }), true);
   var exportGeoJsonLink = linkService.Create(Model.Item.ContentItemId, Url.Action("StreamGeoJson", new { ContentItemId = Model.IdOrAlias }), true);

   var views = new List<PipelineViewModel>();

   var auth = Context.RequestServices.GetService<IAuthorizationService>();

}

   <div class="row">
      <div class="col-md-3">
         <div class="btn-group float-start" role="group">
            @if (entity.Name != "Missing Entity") {
               <button id="id_submit" type="submit" title="Search / Refresh" class="btn btn-primary btn-sm">
                  <span class="fas fa-search"></span>
               </button>

               <button id="id_clear" title="Clear the Parameters" type="button" class="btn btn-info btn-sm">Clear</button>

               if (Model.Part!.BulkActions.Value || Model.Browsing()) {
                  <div class="btn-group btn-group-sm" role="group" aria-label="bulk actions drop down">
                     <button id="idActionDropdown" type="button" class="btn btn-sm btn-danger dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Action
                     </button>
                     <div class="dropdown-menu" aria-labelledby="idActionDropdown">
                        @if(Model.Part.BulkActions.Value){
                           foreach (var action in Model.Process.Actions.Where(a => a.Type != "open" && !string.IsNullOrEmpty(a.Name))) {
                              <a class="bulk-action-link dropdown-item" rel="@action.Description" href="javascript:bulkAction(1, '@action.Name');">@action.Description</a>
                           }
                        } else { // browsing
                           <a class="bulk-action-link dropdown-item" rel="hide" href="javascript:edit('hide');">Hide</a>
                           <a class="bulk-action-link dropdown-item" rel="search" href="javascript:edit('search');">Search</a>
                           <a class="bulk-action-link dropdown-item" rel="facet" href="javascript:edit('facet');">Facet</a>
                           <a class="bulk-action-link dropdown-item" rel="facets" href="javascript:edit('facets');">Facets</a>
                        }
                     </div>
                  </div>
               }
            }
         </div>

         <div class="btn-group float-start" role="group" style="padding-left: 20px;">
            @foreach (var action in Model.Process.Actions.Where(a => a.Type == "open")) {
               var url = new Flurl.Url(action.Url);
               if (!url.QueryParams.Any(qp => qp.Name == Common.ReturnUrlName)) {
                  url.SetQueryParam(Common.ReturnUrlName, Context.Request.GetEncodedUrl().Replace("http:", "https:"));
               }
               <a href="@url" title="@action.Description" rel="nofollow" class="btn btn-sm @action.Class"><i class="fas fa-@action.Icon" aria-hidden="true">@action.Name</i></a>
            }
         </div>
      </div>

    <div class="col-md-6">
    @if (entity.Page == 0 || Model.Process.Mode == "map" && !Model.Part.PageSizesExtended.Enabled() || Model.Process.Mode == "calendar" && !Model.Part.PageSizesExtended.Enabled()) {
        <h3 class="text-primary" style="margin: 2px 0px 0px 0px;">@(entity.Label == string.Empty ? entity.Alias : entity.Label)</h3>
    } else {
         <nav aria-label="breadcrumb-and-pagination" style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);">
            <div class="d-flex justify-content-between align-items-center">
                @if (Model.BreadCrumbs.Any()) {
                    <ol class="breadcrumb mb-0">
                        @foreach (var breadcrumb in Model.BreadCrumbs) {
                            <li class="breadcrumb-item"><a href="@breadcrumb.Url">@breadcrumb.Title</a></li>
                        }
                     @if(entityTitle != "Browse" ){
                        <li class="breadcrumb-item active" aria-current="page"><strong>@entityTitle</strong></li>
                     }
                    </ol>
                }

                <ul class="pagination pagination-sm mb-0">
                    @if (entity.Pagination.HasPrevious) {
                        <li class="page-item" title="first page"><a class="page-link" href="javascript:controls.submit(@entity.Pagination.First)"><span class="fas fa-step-backward"></span></a></li>
                        <li class="page-item" title="previous page"><a class="page-link" href="javascript:controls.submit(@entity.Pagination.Previous)"><span class="fas fa-chevron-left"></span></a></li>
                    } else {
                        <li class="page-item disabled"><a href="" class="page-link"><span class="fas fa-step-backward"></span></a></li>
                        <li class="page-item disabled"><a href="" class="page-link"><span class="fas fa-chevron-left"></span></a></li>
                    }

                    @if(Model.BreadCrumbs.Any()){
                       <li class="page-item disabled" style="white-space:nowrap;">
                           @if (entity.Hits > 0) {
                               <a class="page-link" href="">@(entity.Pagination.StartRow.ToString("#,##0"))-@(entity.Pagination.EndRow.ToString("#,##0")) of @(entity.Hits.ToString("#,##0"))</a>
                           } else {
                               <a class="page-link" href=""> </a>
                           }
                       </li>
                    } else {
                       <li class="page-item disabled" style="white-space:nowrap;">
                           @if (entity.Hits > 0) {
                               <a class="page-link" href="">@(entity.Pagination.StartRow.ToString("#,##0"))-@(entity.Pagination.EndRow.ToString("#,##0")) of @(entity.Hits.ToString("#,##0")) <strong>@entityTitle</strong></a>
                           } else {
                               <a class="page-link" href=""><strong>@entityTitle</strong></a>
                           }
                       </li>
                    }

                    @if (entity.Pagination.HasNext) {
                        <li class="page-item" title="next page"><a class="page-link" href="javascript:controls.submit(@entity.Pagination.Next)"><span class="fas fa-chevron-right"></span></a></li>
                        <li class="page-item" title="last page"><a class="page-link" href="javascript:controls.submit(@entity.Pagination.Last)"><span class="fas fa-step-forward"></span></a></li>
                    } else {
                        <li class="page-item disabled"><a class="page-link" href=""><span class="fas fa-chevron-right"></span></a></li>
                        <li class="page-item disabled"><a class="page-link" href=""><span class="fas fa-step-forward"></span></a></li>
                    }
                </ul>
            </div>
        </nav>
         }
   </div>


      <div class="col-md-3">
         <div class="btn-group float-end" role="group">

            @if (entity.Name != "Missing Entity") {

               if (Model.Item != null && await auth.AuthorizeAsync(Context.User, OrchardCore.Contents.Permissions.EditContent, Model.Item)) {
                  if (Model.BreadCrumbs.Any()){
                     if (!string.IsNullOrEmpty(Context.Request.Query["t"].ToString())){
                        var currentUrl = Context.Request.GetEncodedUrl();
                        var saveUrl = new Flurl.Url(currentUrl).SetQueryParam("save", "true");
                        <button title="save and edit this" type="button" class="btn btn-warning btn-sm" onclick="window.open('@saveUrl', '_self');">
                           <span class="fas fa-edit"></span>
                        </button>
                     }
                  } else {
                     <button title="edit this report" type="button" class="btn btn-warning btn-sm" onclick="window.open('@(Url.Content("~/Admin/Contents/ContentItems/" + Model.Item.ContentItemId + "/Edit?" + Common.ReturnUrlName + "=" + System.Net.WebUtility.UrlEncode(Context.Request.Path + Context.Request.QueryString)))', '_self');">
                        <span class="fas fa-edit"></span>
                     </button>
                  }
               }

               @*if (Model.Process.Mode == "map") {
                   if (Model.MapCfg != null) {
                       <div class="btn-group" role="group">
                           <button type="button" class="btn btn-default btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                               Style
                               <span class="caret"></span>
                           </button>
                           <ul class="dropdown-menu" id="mapStyles">
                               @foreach (var style in Model.MapCfg.Styles) {
                                   <li style="cursor: pointer;"><a id="@style.Url">@style.Name</a></li>
                               }
                           </ul>
                       </div>
                   }
                   if (Model.Part.MapRefresh) {
                       <button title="refresh map" type="button" class="btn btn-danger btn-sm" id="mapRefresh">
                           <span class="fas fa-refresh"></span>
                       </button>
                   }
               }*@

               // for now, if map is not enabled, you don't need this because there is only map and report views so far (no calendar)
               if (Model.Part.Map.Value && hasCoordinates || Model.Part.Calendar.Value) {

                  var headless = Context.Request.GetDisplayUrl().Contains("Headless");

                  // not using Url.Action because I don't want the autoroute (friendly slug name) here
                  var reportUrl = Url.Content("~/t/report/" + Model.IdOrAlias);
                  if (headless) {
                     reportUrl = reportUrl.Replace("/t/report/", "/t/headless/report/");
                  }

                  views.Add(new PipelineViewModel("report") {
                     Active = Model.Process.Mode == "report",
                     Glyphicon = "list",
                     Link = linkService.Create(Model.IdOrAlias, reportUrl, !Model.Part.PageSizes.Enabled())
                  });

                  if (Model.Part.Map.Value && hasCoordinates) {

                     var mapUrl = Url.Action("Index", "Map", new { ContentItemId = Model.IdOrAlias });
                     if (headless) {
                        mapUrl = mapUrl.Replace("/t/report/map/", "/t/headless/report/map/");
                     }
                     views.Add(new PipelineViewModel("map") {
                        Active = Model.Process.Mode == "map",
                        Glyphicon = "map-marker",
                        Link = linkService.Create(Model.IdOrAlias, mapUrl, !Model.Part.PageSizesExtended.Enabled())
                     });
                  }

                  if (Model.Part.Calendar.Value) {

                     var calendarUrl = Url.Action("Index", "Calendar", new { ContentItemId = Model.IdOrAlias });
                     if (headless) {
                        calendarUrl = calendarUrl.Replace("/t/report/calendar/", "/t/headless/report/calendar/");
                     }
                     views.Add(new PipelineViewModel("calendar") {
                        Active = Model.Process.Mode == "calendar",
                        Glyphicon = "calendar",
                        Link = linkService.Create(Model.IdOrAlias, calendarUrl, !Model.Part.PageSizesExtended.Enabled())
                     });
                  }

                  var defaultView = views.First(v => v.Mode != Model.Process.Mode);

                  <div class="btn-group btn-group-sm" role="group">
                     <button type="button" class="btn btn-primary btn-sm" title="@defaultView.Title" onclick="javascript:window.open('@defaultView.Link','_self');">
                        <span class="fas fa-@defaultView.Glyphicon"></span>
                     </button>
                     <button type="button" class="btn btn-primary btn-sm dropdown-toggle" title="other views" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="caret"></span>
                     </button>
                     <div class="dropdown-menu">
                        @foreach (var export in views) {
                           <a class="dropdown-item @(export.Active ? "active" : string.Empty)" href="@(export.Link)" title="@export.Title">
                              <span class="fas fa-@export.Glyphicon"></span>&nbsp;&nbsp;@export.Label
                           </a>
                        }
                     </div>
                  </div>
               }

               <div class="btn-group btn-group-sm">
                  <button type="button" class="btn btn-sm btn-info" title="save to csv file" onclick="openRandomLink('@exportCsvLink');">
                     <span class="fas fa-save"></span>
                  </button>
                  <button class="btn dropdown-toggle btn-sm btn-info" title="other formats" data-bs-toggle="dropdown">
                     <span class="caret"></span>
                  </button>
                  <ul class="dropdown-menu">
                     <li><a class="dropdown-item" href="javascript:openRandomLink('@exportCsvLink');" title="save to csv file">CSV</a></li>
                     <li><a class="dropdown-item" href="javascript:openRandomLink('@exportJsonLink');" title="save to json file">JSON</a></li>
                     @{
                        if (hasCoordinates) {
                           <li><a class="dropdown-item" href="javascript:openRandomLink('@exportGeoJsonLink');" title="save to geojson file">GEOJSON</a></li>
                        }
                     }
                  </ul>
               </div>

               if (pageSizes.Count < 2) {
                  <!-- paging is disabled -->
               } else {
                  <div class="btn-group btn-group-sm">
                     <button class="btn btn-sm btn-outline-info" disabled="disabled">Size</button>
                     <button class="btn dropdown-toggle btn-sm btn-outline-info" data-bs-toggle="dropdown" title="set page size" style="padding-left:4px;">
                        <span class="caret"></span>
                     </button>
                     <div class="dropdown-menu">
                        @foreach (var size in pageSizes) {
                           <a class="dropdown-item @(entity.Size.Equals(size) ? "active" : string.Empty)" href="javascript:controls.setSize(@size);">@size</a>
                        }
                     </div>
                  </div>
               }
            }
         </div>
      </div>
   </div>
   <script type="text/javascript">
      // <!--
      function openRandomLink(url) {
         url = url + (url.indexOf('?') > -1 ? '&' : '?') + 'random=' + Math.random();
         javascript:window.open(url,'_self');
      }
      // -->
   </script>



