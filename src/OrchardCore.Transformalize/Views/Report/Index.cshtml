@model ReportViewModel
@using Microsoft.Extensions.DependencyInjection;
@using TransformalizeModule
@using System.Linq
@using TransformalizeModule.Services.Contracts
@using TransformalizeModule.Services
@using Transformalize.Configuration

@{
   RenderTitleSegments(Model.Title, "before");

   var firstEntity = Model.Process.Entities.First();
   var sortService = Context.RequestServices.GetService<ISortService>();
   var edit = Model.QueryValue("edit") != string.Empty;
}

<script asp-name="jQuery" at="Head"></script>
<script asp-name="jQuery-ui" at="Foot"></script>
<script asp-name="jquery-drag-table" version="2.0.15" at="Foot"></script>
<script asp-name="popper" at="Foot"></script>
<script asp-name="bootstrap-select-beta3" version="1.14.0" at="Foot"></script>
<script asp-name="prism" version="1.20.0" at="Foot"></script>
<script asp-name="prism-markup" version="1.20.0" at="Foot"></script>
<script asp-name="block-ui" version="2.70.0" at="Foot"></script>
<script asp-name="underscore" version="1.4.1" at="Foot"></script>

<style asp-name="jQuery-ui"></style>
<style asp-name="bootstrap-select-beta3" version="1.14.0"></style>
<style asp-name="jquery-drag-table" version="2.0.15"></style>
<style asp-name="prism" version="1.20.0"></style>

<style>
   .btn-sort {
     background-color: #dbdbdb;
     border-color: #d2d1d1;
     color: #727272;
   }

   td.sorter .btn-sm {
     font-size: 7px !important;
   }

   td.sorter {
     padding: 0 3px 3px 4px !important;
   }

   thead > tr > td > input.form-control {
     padding-left: 4px;
     padding-right: 4px;
     height: 30px;
   }

   #busy {
     position: fixed;
     left: 46%;
     top: 40%;
     display: none;
     background: transparent url(@Url.Content($"~/{Common.ModuleName}/Styles/busy.gif"));
     background-size: 149px 149px;
     background-repeat: no-repeat;
     z-index: 1020;
     height: 150px;
     width: 150px;
   }

   #busy-holder {
     background: transparent;
     width: 100%;
     height: 100%;
   }

   .table-sm > tbody > tr > td {
     padding: 2px;
   }

   tr.action-row {
     font-size: smaller;
     font-weight: bolder;
   }

   div.table-responsive {
   min-height: 600px;
   }

   main.container {
     max-width: 98%;
   }
   .navbar {
     padding: 0px;
   }

   div.comment {
     padding: 0;
   }

   td > div > input[type="checkbox"] {
     margin-top: 7px !important;
   }

   .small-badge {
     font-size: 0.75em;
     padding: 0.2em 0.4em;
     line-height: 1;
   }

   th.drag {
     cursor: grab
   }

   th.drag:active {
     cursor: grabbing
   }

   /* trying to make parameters with labels look better */
   .input-group {
       border: 1px solid #ccc; /* Visible border around the group */
       border-radius: 4px; /* Ensures consistent rounding */
       display: flex;
       align-items: center;
   }

   .input-group .bootstrap-select {
       flex-grow: 1;
   }

   .input-group-text {
       border-right: none; /* Prevents a double border next to the dropdown */
       border-radius: 4px 0 0 4px; /* Matches left-side rounding */
   }

   .input-group-text + .bootstrap-select > .btn {
       border-radius: 0 4px 4px 0; /* Removes left-side rounding only when next to input-group-text */
       border: 1px solid #ccc; /* Ensures consistent border appearance */
   }

   .bootstrap-select .dropdown-toggle {
       border: inherit; /* Ensures dropdown inherits the input group border */
   }

   @foreach (var script in Model.Process.Scripts.Where(s => s.Global && s.Language == "css" && string.IsNullOrEmpty(s.File))) {
      <text>/* @script.Name css script */</text>
      @Html.Raw(script.Content)

   }

</style>

<form id="id_report" class="form-inline" role="form" method="GET">

   <input id="id_sort" type="hidden" name="sort" value="@(Model.QueryValue("sort"))" />
   <input id="id_page" type="hidden" name="page" value="@firstEntity.Page" />
   <input id="id_size" type="hidden" name="size" value="@(firstEntity.Size)" />
   <input id="id_return_url" type="hidden" name="@Common.ReturnUrlName" value="@(Model.QueryValue(Common.ReturnUrlName))" />
   <input id="id_last" type="hidden" name="last" />
   <input id="id_edit" type="hidden" name="edit" alt="editor" value="@(Model.QueryValue("edit"))" />

   @* browsing/editing related *@
   <input id="id_c" type="hidden" name="c" alt="connection" value="@(Model.QueryValue("c"))" />
   <input id="id_t" type="hidden" name="t" alt="table" value="@(Model.QueryValue("t"))" />
   <input id="id_h" type="hidden" name="h" alt="hidden" value="@(Model.QueryValue("h"))" />
   <input id="id_s" type="hidden" name="s" alt="search" value="@(Model.QueryValue("s"))" />
   <input id="id_f1" type="hidden" name="f1" alt="facet" value="@(Model.QueryValue("f1"))" />
   <input id="id_f2" type="hidden" name="f2" alt="facets" value="@(Model.QueryValue("f2"))" />
   <input id="id_ta" type="hidden" name="ta" alt="timeago" value="@(Model.QueryValue("ta"))" />
   <input id="id_e" type="hidden" name="e" alt="ellipsis" value="@(Model.QueryValue("e"))" />
   <input id="id_o" type="hidden" name="o" alt="order" value="@(Model.QueryValue("o"))" />

   @foreach (var parameter in Model.Process.Parameters.Where(p => !p.Prompt && Context.Request.Query[p.Name].ToString() != null).Select(p => p.Name)) {
      <input type="hidden" name="@parameter" value="@(Context.Request.Query[parameter].ToString())" />
   }

   <div class="container-fluid">

      @Html.Partial("Parameters", Model)

      @Html.Partial("Controls", Model)

      @foreach (var entity in Model.Process.Entities) {

         Field[] fields;
         Field bulkActionValueField = null;
         if (Model.Part.BulkActions.Value && entity.TryGetField(Model.Part.BulkActionValueField.Text, out bulkActionValueField)) {
            fields = firstEntity.GetAllOutputFields().Where(f => !f.System && f.Alias != bulkActionValueField.Alias).ToArray();
         } else {
            fields = firstEntity.GetAllOutputFields().Where(f => !f.System).ToArray();
         }
         var isSortable = fields.Any(f => f.Sortable == "true");

         <div class="row" style="padding-top: 2px;">
            <div class="col-sm-12 table-responsive">
               <table id="id_table_@entity.Sequence" class="table table-sm table-hover table-striped tablesorter">
                  <thead>
                     <tr class="action-row">
                        @if (Model.Part.BulkActions.Value) {
                           <th>
                              <div class="checkbox form-check">
                                 <input title="Select the entire search result" id="select-all" type="checkbox" class="bulk-action form-check-input" name="select-all" placeholder="Select the entire search result">
                              </div>
                           </th>
                        }
                        @foreach (var field in fields) {
                           <th title="@field.Name" class="@(field.IsCalculated ? string.Empty : "drag")" data-src="@field.Src">@field.Label</th>
                        }
                     </tr>
                     @if (isSortable) {
                        var expression = Context.Request.Query["sort"].ToString() ?? string.Empty;
                        <tr class="tablesorter-ignoreRow">
                           @if (Model.Part.BulkActions.Value) {
                              <td class="sorter">&nbsp;</td>
                           }
                           @foreach (var field in fields) {
                              if (field.Sortable == "true") {
                                 <td class="sorter" data-src="@field.Src" data-field-name="@field.Name">
                                    <div class="btn-group btn-group-sm">
                                       <a href="javascript:void()" title="Sort Ascending by @field.Label" class="btn btn-sm @(sortService.Sort(field.Src, expression) == Direction.Asc ? "btn-primary" : "btn-sort") sortable">
                                          <span class="fas fa-chevron-up"></span>
                                       </a>
                                       @if(Model.Editable && edit){
                                          <a href="javascript:void()" title="@field.Name @field.Type @field.Length" class="btn btn-sm btn-sort editor" >
                                             <input type="checkbox" class="field-check shift-select" data-src="@field.Src" />
                                          </a>
                                       }
                                       <a href="javascript:void()" title="Sort Descending by @field.Label" class="btn btn-sm @(sortService.Sort(field.Src, expression) == Direction.Desc ? "btn-primary" : "btn-sort") sortable">
                                          <span class="fas fa-chevron-down"></span>
                                       </a>
                                    </div>
                                 </td>
                              } else {
                                 <td style="padding: 0 3px 3px 1px;">&nbsp;</td>
                              }
                           }
                        </tr>
                     }
                     @if (Model.InlineParameters.Any()) {
                        <tr class="tablesorter-ignoreRow">
                           @if (Model.Part.BulkActions.Value) {
                              <td class="sorter">&nbsp;</td>
                           }
                           @foreach (var field in fields) {
                              <td style="padding-left: 3px;">
                                 @if (Model.InlineParameters.ContainsKey(field.Alias)) {
                                    var parameter = Model.InlineParameters[field.Alias];
                                    @Html.Partial("Parameter", new ParameterViewModel { Maps = Model.Process.Maps, Parameter = parameter, Field = field })
                                 }
                              </td>
                           }
                        </tr>
                     }
                  </thead>
                  <tbody>
                     @foreach (var row in entity.Rows) {
                        <tr>
                           @if (Model.Part.BulkActions.Value) {
                              if (bulkActionValueField != null) {
                                 <td>
                                    <div class="checkbox form-check">
                                       <input title="Select this row"
                                              type="checkbox"
                                              class="bulk-action shift-select form-check-input"
                                              name="Records"
                                              value="@row[bulkActionValueField.Alias]"
                                              placeholder="Select Record">
                                    </div>
                                 </td>
                              } else {
                                 <td>
                                    <div class="checkbox form-check">
                                       <input type="checkbox" class="form-check-input" name="Records" disabled="disabled">
                                    </div>
                                 </td>
                              }
                           }

                           @foreach (var field in fields) {
                              <td>
                                 @switch (field.Type) {
                                    case "bool":
                                    case "boolean":
                                       if ((bool)row[field.Alias]) {
                                          <span class="badge text-bg-success small-badge" aria-label="Yes">
                                             <span class="fas fa-check" aria-hidden="true"></span>
                                          </span>
                                       } else {
                                          <span class="badge text-bg-danger small-badge" aria-label="No">
                                             <span class="fas fa-times" aria-hidden="true"></span>
                                          </span>
                                       }
                                       break;
                                    case "date":
                                    case "datetime":
                                       if (field.Format == string.Empty) {
                                          @(row[field.Alias])
                                       } else {
                                          if (row[field.Alias] is DateTime) {
                                             @(((DateTime)row[field.Alias]).ToString(field.Format))
                                          } else {
                                             @((Convert.ToDateTime(row[field.Alias])).ToString(field.Format))
                                          }
                                       }
                                       break;
                                    case "byte[]":
                                       @Transformalize.Utility.BytesToHexString(row[field.Alias] as byte[])
                                       break;
                                    case "single":
                                    case "double":
                                    case "decimal":
                                    case "float":
                                       if (field.Format == string.Empty) {
                                          @(row[field.Alias])
                                       } else {
                                          switch (field.Type) {
                                             case "single":
                                             case "float":
                                                @(row[field.Alias] is float ? ((float)row[field.Alias]).ToString(field.Format) : Convert.ToSingle(row[field.Alias]).ToString(field.Format))
                                                break;
                                             case "decimal":
                                                @(row[field.Alias] is decimal ? ((decimal)row[field.Alias]).ToString(field.Format) : Convert.ToDecimal(row[field.Alias]).ToString(field.Format))
                                                break;
                                             case "double":
                                                @(row[field.Alias] is double ? ((double)row[field.Alias]).ToString(field.Format) : Convert.ToDouble(row[field.Alias]).ToString(field.Format))
                                                break;
                                             default:
                                                @(row[field.Alias])
                                                break;
                                          }

                                       }
                                       break;
                                    default:
                                       if (field.Raw) {
                                          @Html.Raw(row[field.Alias])
                                       } else {
                                          @row[field.Alias]
                                       }

                                       break;
                                 }
                              </td>
                           }
                        </tr>
                     }
                  </tbody>
               </table>

               @*@if (Model.Part.ClientSideSorting) {
                      <script type="text/javascript">
                     // <!--
                    $(document).ready(function() {
                       $("#id_table_@entity.Sequence").tablesorter();
                       $("#id_table_@entity.Sequence")
                          .bind("sortStart", function() {
                             $('#busy').show();
                          })
                          .bind("sortEnd", function() {
                             $('#busy').hide();
                          });
                    });
                    // -->
                      </script>
                  }*@

            </div>
         </div>
      }

   </div>

</form>

<span class="AntiForge">@Html.AntiForgeryToken()</span>

<div id="busy_holder">
   <div id="busy"></div>
</div>

<script type="text/javascript">
   //<!--

   var server = {
      entity: {
         page: @firstEntity.Page
      },
      bulkActionUrl: '@(Url.Action("Create", "BulkAction", new { ContentItemId = Model.Item.ContentItemId }))'
   };

   @foreach (var script in Model.Process.Scripts.Where(s => s.Global && string.IsNullOrEmpty(s.File) && s.Language == "js")) {
      <text>/* @script.Name */</text>
      @Html.Raw(script.Content)
   }
    //-->
</script>
<script asp-src="~/@Common.ModuleName/Scripts/report.js"></script>
